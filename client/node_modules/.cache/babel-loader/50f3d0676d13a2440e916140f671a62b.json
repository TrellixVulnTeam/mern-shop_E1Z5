{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { productsReducer, productDetailsReducer } from './reducers/productsReducer';\nimport { userRegReducer, userLoginReducer, userProfileReducer, userUpdateReducer } from './reducers/userReducer';\nimport { cartReducer } from './reducers/cartReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { orderReducer } from './reducers/orderReducer';\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst cartItemFromStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [];\nconst shippingAdressFromStorage = localStorage.getItem('shippingAdress') ? JSON.parse(localStorage.getItem('shippingAdress')) : {};\nconst cartPaymentMethodFromStorage = localStorage.getItem('paymentMethod') ? JSON.parse(localStorage.getItem('paymentMethod')) : {};\nconst reducer = combineReducers({\n  productList: productsReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userReg: userRegReducer,\n  userLog: userLoginReducer,\n  userProfile: userProfileReducer,\n  userUpdate: userUpdateReducer,\n  createOrder: orderReducer\n});\nconst initialState = {\n  cart: {\n    cartItems: cartItemFromStorage,\n    shippingAdress: shippingAdressFromStorage,\n    paymentMethod: cartPaymentMethodFromStorage\n  },\n  //userReg:{userReg:userRegFromStorage},\n  userLog: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/grunge/Desktop/mycms/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","productsReducer","productDetailsReducer","userRegReducer","userLoginReducer","userProfileReducer","userUpdateReducer","cartReducer","composeWithDevTools","orderReducer","userInfoFromStorage","localStorage","getItem","JSON","parse","cartItemFromStorage","shippingAdressFromStorage","cartPaymentMethodFromStorage","reducer","productList","productDetails","cart","userReg","userLog","userProfile","userUpdate","createOrder","initialState","cartItems","shippingAdress","paymentMethod","userInfo","middleware","store"],"mappings":"AAAA,SAAQA,WAAR,EAAoBC,eAApB,EAAoCC,eAApC,QAA0D,OAA1D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,eAAR,EAAyBC,qBAAzB,QAAqD,4BAArD;AACA,SAAQC,cAAR,EAAwBC,gBAAxB,EAA0CC,kBAA1C,EAA6DC,iBAA7D,QAAqF,wBAArF;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AAGA,MAAMC,mBAAmB,GAACC,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAiCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAjC,GAA8E,IAAxG;AAEA,MAAMG,mBAAmB,GAACJ,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAkCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAlC,GAAgF,EAA1G;AAEA,MAAMI,yBAAyB,GAACL,YAAY,CAACC,OAAb,CAAqB,gBAArB,IAAwCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAX,CAAxC,GAA2F,EAA3H;AACA,MAAMK,4BAA4B,GAACN,YAAY,CAACC,OAAb,CAAqB,eAArB,IAAsCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAX,CAAtC,GAAwF,EAA3H;AAEA,MAAMM,OAAO,GAACpB,eAAe,CAAC;AAC1BqB,EAAAA,WAAW,EAAClB,eADc;AAE1BmB,EAAAA,cAAc,EAAClB,qBAFW;AAG1BmB,EAAAA,IAAI,EAACd,WAHqB;AAI1Be,EAAAA,OAAO,EAACnB,cAJkB;AAK1BoB,EAAAA,OAAO,EAACnB,gBALkB;AAM1BoB,EAAAA,WAAW,EAACnB,kBANc;AAO1BoB,EAAAA,UAAU,EAACnB,iBAPe;AAQ1BoB,EAAAA,WAAW,EAACjB;AARc,CAAD,CAA7B;AAUA,MAAMkB,YAAY,GAAC;AACfN,EAAAA,IAAI,EAAC;AACDO,IAAAA,SAAS,EAACb,mBADT;AAEDc,IAAAA,cAAc,EAACb,yBAFd;AAGDc,IAAAA,aAAa,EAACb;AAHb,GADU;AAMf;AACAM,EAAAA,OAAO,EAAC;AAACQ,IAAAA,QAAQ,EAACrB;AAAV;AAPO,CAAnB;AASA,MAAMsB,UAAU,GAAC,CAAChC,KAAD,CAAjB;AACA,MAAMiC,KAAK,GAACpC,WAAW,CACnBqB,OADmB,EAEnBS,YAFmB,EAGnBnB,mBAAmB,CAACT,eAAe,CAAC,GAAGiC,UAAJ,CAAhB,CAHA,CAAvB;AAMA,eAAeC,KAAf","sourcesContent":["import {createStore,combineReducers,applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {productsReducer, productDetailsReducer} from './reducers/productsReducer'\r\nimport {userRegReducer, userLoginReducer, userProfileReducer,userUpdateReducer} from './reducers/userReducer'\r\nimport {cartReducer} from './reducers/cartReducer'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {orderReducer} from './reducers/orderReducer'\r\n\r\n\r\nconst userInfoFromStorage=localStorage.getItem('userInfo')?JSON.parse(localStorage.getItem('userInfo')):null\r\n\r\nconst cartItemFromStorage=localStorage.getItem(\"cartItems\")?JSON.parse(localStorage.getItem(\"cartItems\")):[]\r\n\r\nconst shippingAdressFromStorage=localStorage.getItem('shippingAdress')? JSON.parse(localStorage.getItem('shippingAdress')):{}\r\nconst cartPaymentMethodFromStorage=localStorage.getItem('paymentMethod')?JSON.parse(localStorage.getItem('paymentMethod')):{}\r\n\r\nconst reducer=combineReducers({\r\n    productList:productsReducer,\r\n    productDetails:productDetailsReducer,\r\n    cart:cartReducer,\r\n    userReg:userRegReducer,\r\n    userLog:userLoginReducer,\r\n    userProfile:userProfileReducer,\r\n    userUpdate:userUpdateReducer,\r\n    createOrder:orderReducer\r\n})\r\nconst initialState={\r\n    cart:{\r\n        cartItems:cartItemFromStorage,\r\n        shippingAdress:shippingAdressFromStorage,\r\n        paymentMethod:cartPaymentMethodFromStorage\r\n    },\r\n    //userReg:{userReg:userRegFromStorage},\r\n    userLog:{userInfo:userInfoFromStorage},\r\n}\r\nconst middleware=[thunk]\r\nconst store=createStore(\r\n    reducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n    )\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}